import 'package:drift/drift.dart';
import 'package:pathfinder_sheet/database/database.dart';
import 'package:pathfinder_sheet/models.dart/character.dart';

class Mapper {
  Character toCharacter(TableCharacterData element) {
    final CharacterSavingThrows savingThrows = CharacterSavingThrows(
        fortBase: element.fortBase,
        fortMagic: element.fortMagic,
        fortMisc: element.fortMisc,
        fortTemp: element.fortTemp,
        refBase: element.refBase,
        refMagic: element.refMagic,
        refMisc: element.refMisc,
        refTemp: element.refTemp,
        willBase: element.willBase,
        willMagic: element.willMagic,
        willMisc: element.willMisc,
        willTemp: element.willTemp);

    final CharacterBab babBlock = CharacterBab(
        bab: element.bab,
        mabMisc: element.mabMisc,
        mabTemp: element.mabTemp,
        tabMisc: element.tabMisc,
        tabTemp: element.tabTemp,
        rabMisc: element.rabMisc,
        rabTemp: element.rabTemp);

    final CharacterAbility ability = CharacterAbility(
      strength: element.strength,
      dexterity: element.dexterity,
      constitution: element.constitution,
      intelligence: element.intelligence,
      wisdom: element.wisdom,
      charisma: element.charisma,
      strengthTmp: element.strengthTmp,
      dexterityTmp: element.dexterityTmp,
      constitutionTmp: element.constitutionTmp,
      intelligenceTmp: element.intelligenceTmp,
      wisdomTmp: element.wisdomTmp,
      charismaTmp: element.charismaTmp,
    );

    final CharacterLiveBlock liveBlock = CharacterLiveBlock(
        maxHp: element.maxHp,
        currentHp: element.currentHp,
        maxStam: element.maxStam,
        currentStam: element.currentStam,
        maxResolve: element.maxResolve,
        currentResolve: element.currentResolve,
        damageLog: element.damageLog);

    final ACBLock eacBlock = ACBLock(
        amror: element.eacArmor,
        dodge: element.eacDodger,
        natural: element.eacNatural,
        deflect: element.eacDeflect,
        misc: element.eacMisc);

    final ACBLock kacBlock = ACBLock(
        amror: element.kacArmor,
        dodge: element.kacDodger,
        natural: element.kacNatural,
        deflect: element.kacDeflect,
        misc: element.kacMisc);

    return Character(
      id: element.id,
      charName: element.charName,
      charClass: element.charClass,
      lvl: element.lvl,
      race: element.race,
      alignment: CharAlignment.values
          .firstWhere((e) => e.alignName == element.alignment),
      size: CharSize.values.firstWhere((e) => e.sizeName == element.size),
      ability: ability,
      liveBlock: liveBlock,
      eacBlock: eacBlock,
      kacBlock: kacBlock,
      moveSpeed: element.moveSpeed,
      flySpeed: element.flySpeed,
      swimSpeed: element.swimSpeed,
      initMisc: element.initMisc,
      babBlock: babBlock,
      savingThrows: savingThrows,
      dr: element.dr,
      sr: element.sr,
    );
  }

  TableCharacterData toTableCharacterData(Character character) {
    return TableCharacterData(
      id: character.id,
      charName: character.charName,
      charClass: character.charClass,
      lvl: character.lvl,
      race: character.race,
      alignment: character.alignment.alignName,
      size: character.size.sizeName,
      strength: character.ability.strength,
      dexterity: character.ability.dexterity,
      constitution: character.ability.constitution,
      intelligence: character.ability.intelligence,
      wisdom: character.ability.wisdom,
      charisma: character.ability.charisma,
      strengthTmp: character.ability.strengthTmp,
      dexterityTmp: character.ability.dexterityTmp,
      constitutionTmp: character.ability.constitutionTmp,
      intelligenceTmp: character.ability.intelligenceTmp,
      wisdomTmp: character.ability.wisdomTmp,
      charismaTmp: character.ability.charismaTmp,
      maxHp: character.liveBlock.maxHp,
      currentHp: character.liveBlock.currentHp,
      maxStam: character.liveBlock.maxStam,
      currentStam: character.liveBlock.currentStam,
      maxResolve: character.liveBlock.maxResolve,
      currentResolve: character.liveBlock.currentResolve,
      damageLog: character.liveBlock.damageLog,
      eacArmor: character.eacBlock.amror,
      eacDodger: character.eacBlock.dodge,
      eacNatural: character.eacBlock.natural,
      eacDeflect: character.eacBlock.deflect,
      eacMisc: character.eacBlock.misc,
      kacArmor: character.kacBlock.amror,
      kacDodger: character.kacBlock.dodge,
      kacNatural: character.kacBlock.natural,
      kacDeflect: character.kacBlock.deflect,
      kacMisc: character.kacBlock.misc,
      moveSpeed: character.moveSpeed,
      flySpeed: character.flySpeed,
      swimSpeed: character.swimSpeed,
      initMisc: character.initMisc,
      bab: character.babBlock.bab,
      mabMisc: character.babBlock.mabMisc,
      mabTemp: character.babBlock.mabTemp,
      tabMisc: character.babBlock.tabMisc,
      tabTemp: character.babBlock.tabTemp,
      rabMisc: character.babBlock.rabMisc,
      rabTemp: character.babBlock.rabTemp,
      fortBase: character.savingThrows.fortBase,
      fortMagic: character.savingThrows.fortMagic,
      fortMisc: character.savingThrows.fortMisc,
      fortTemp: character.savingThrows.fortTemp,
      refBase: character.savingThrows.refBase,
      refMagic: character.savingThrows.refMagic,
      refMisc: character.savingThrows.refMisc,
      refTemp: character.savingThrows.refTemp,
      willBase: character.savingThrows.willBase,
      willMagic: character.savingThrows.willMagic,
      willMisc: character.savingThrows.willMisc,
      willTemp: character.savingThrows.willTemp,
      dr: character.dr,
      sr: character.sr,
    );
  }

  TableCharacterCompanion toTableCharacterCompanion(Character character) {
    return TableCharacterCompanion(
      //id: Value(character.id),
      charName: Value(character.charName),
      charClass: Value(character.charClass),
      lvl: Value(character.lvl),
      race: Value(character.race),
      alignment: Value(character.alignment.alignName),
      size: Value(character.size.sizeName),
      strength: Value(character.ability.strength),
      dexterity: Value(character.ability.dexterity),
      constitution: Value(character.ability.constitution),
      intelligence: Value(character.ability.intelligence),
      wisdom: Value(character.ability.wisdom),
      charisma: Value(character.ability.charisma),
      strengthTmp: Value(character.ability.strengthTmp),
      dexterityTmp: Value(character.ability.dexterityTmp),
      constitutionTmp: Value(character.ability.constitutionTmp),
      intelligenceTmp: Value(character.ability.intelligenceTmp),
      wisdomTmp: Value(character.ability.wisdomTmp),
      charismaTmp: Value(character.ability.charismaTmp),
      maxHp: Value(character.liveBlock.maxHp),
      currentHp: Value(character.liveBlock.currentHp),
      maxStam: Value(character.liveBlock.maxStam),
      currentStam: Value(character.liveBlock.currentStam),
      maxResolve: Value(character.liveBlock.maxResolve),
      currentResolve: Value(character.liveBlock.currentResolve),
      damageLog: Value(character.liveBlock.damageLog),
      eacArmor: Value(character.eacBlock.amror),
      eacDodger: Value(character.eacBlock.dodge),
      eacNatural: Value(character.eacBlock.natural),
      eacDeflect: Value(character.eacBlock.deflect),
      eacMisc: Value(character.eacBlock.misc),
      kacArmor: Value(character.kacBlock.amror),
      kacDodger: Value(character.kacBlock.dodge),
      kacNatural: Value(character.kacBlock.natural),
      kacDeflect: Value(character.kacBlock.deflect),
      kacMisc: Value(character.kacBlock.misc),
      moveSpeed: Value(character.moveSpeed),
      flySpeed: Value(character.flySpeed),
      swimSpeed: Value(character.swimSpeed),
      initMisc: Value(character.initMisc),
      bab: Value(character.babBlock.bab),
      mabMisc: Value(character.babBlock.mabMisc),
      mabTemp: Value(character.babBlock.mabTemp),
      tabMisc: Value(character.babBlock.tabMisc),
      tabTemp: Value(character.babBlock.tabTemp),
      rabMisc: Value(character.babBlock.rabMisc),
      rabTemp: Value(character.babBlock.rabTemp),
      fortBase: Value(character.savingThrows.fortBase),
      fortMagic: Value(character.savingThrows.fortMagic),
      fortMisc: Value(character.savingThrows.fortMisc),
      fortTemp: Value(character.savingThrows.fortTemp),
      refBase: Value(character.savingThrows.refBase),
      refMagic: Value(character.savingThrows.refMagic),
      refMisc: Value(character.savingThrows.refMisc),
      refTemp: Value(character.savingThrows.refTemp),
      willBase: Value(character.savingThrows.willBase),
      willMagic: Value(character.savingThrows.willMagic),
      willMisc: Value(character.savingThrows.willMisc),
      willTemp: Value(character.savingThrows.willTemp),
      dr: Value(character.dr),
      sr: Value(character.sr),
    );
  }
}
